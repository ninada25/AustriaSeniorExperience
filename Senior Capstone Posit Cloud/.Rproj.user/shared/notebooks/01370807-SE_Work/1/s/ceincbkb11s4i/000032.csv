"0","library(lime)"
"0",""
"0","# Assuming your dataset is named 'countries_with_happy_imputed'"
"0","# Assuming the response variable is named 'Happiness_score'"
"0",""
"0","set.seed(01302024)"
"0",""
"0","# Divide dataset into train and test"
"0","smp_size <- floor(0.75 * nrow(countries_with_happy_imputed)) "
"0","train_index <- sample(seq_len(nrow(countries_with_happy_imputed)), size = smp_size)"
"0",""
"0","train_countries <- countries_with_happy_imputed[train_index, ]"
"0","test_countries <- countries_with_happy_imputed[-train_index, ]"
"0",""
"0","# Remove the response variable from the training and test datasets"
"0","response_train <- train_countries$Happiness_score"
"0","response_test <- test_countries$Happiness_score"
"0","train_countries <- subset(train_countries, select = -Happiness_score)"
"0","test_countries <- subset(test_countries, select = -Happiness_score)"
"0",""
"0","# Train the random forest model"
"0","cv_specs <- trainControl(method = ""repeatedcv"", number = 10, repeats = 5, verboseIter = FALSE)"
"0","model_rf_countries <- train(x = train_countries, "
"0","                            y = response_train, "
"0","                            method = ""rf"", "
"0","                            trControl = cv_specs,"
"0","                            metric = ""RMSE"")"
"0",""
"0","# Apply the model to make predictions on the test set"
"0","countries_rf_preds <- predict(model_rf_countries, newdata = test_countries)"
"0",""
"0","# Use LIME to create an explainer object"
"0","explainer <- lime(train_countries, model_rf_countries)"
"0",""
"0","# Explain predictions on a subset of the test set"
"0","explanation <- test_countries %>%"
"0","  slice(1:4) %>%"
"0","  lime::explain(explainer = explainer, "
"0","                n_labels = 1, "
"0","                n_features = 6, "
"0","                n_permutations = 5000, "
"0","                kernel_width = 0.5)"
"0",""
"0","# Visualize the explanation"
"0","plot_features(explanation, ncol = 2)"
